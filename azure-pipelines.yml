trigger:
- master

pool:
  vmImage: 'windows-latest'

variables: 
  solution: '**/*.sln'
  project: '**/AdCodicem.SpecFlow.MicrosoftDependencyInjection.csproj'
  testProject: '**/Sample.Specs.csproj'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
- stage: build
  jobs:
    - job:
      steps:
      - task: UseDotNet@2
        displayName: dotnet 3.1 install
        inputs:
          version: '3.1.x'
          packageType: runtime

      - task: DotNetCoreCLI@2
        displayName: dotnet restore
        inputs:
          command: 'restore'
          projects: '$(solution)'
          feedsToUse: 'select'
        
      - task: DotNetCoreCLI@2
        displayName: dotnet build
        inputs:
          command: 'build'
          projects: '$(solution)'
          arguments: '--no-restore --configuration $(buildConfiguration)'
        
      - task: DotNetCoreCLI@2
        displayName: dotnet test
        inputs:
          command: 'test'
          projects: '$(testProject)'
          arguments: '--no-restore --no-build --configuration $(buildConfiguration) --collect "Code Coverage"'

      - task: DotNetCoreCLI@2
        displayName: dotnet pack
        inputs:
          command: 'pack'
          packagesToPack: '$(project)'
          arguments: '--output "$(Build.ArtifactStagingDirectory)"'
          nobuild: true
          includesymbols: true
          versioningScheme: 'off'


      - task: PublishBuildArtifacts@1
        displayName: Publish artifacts
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'
  
- stage: release
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  dependsOn: build
  jobs:
    - job:
      steps:
      - task: DownloadBuildArtifacts@0
        displayName: Download artifacts
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'drop'
          downloadPath: '$(System.ArtifactsDirectory)'
      - task: NuGetCommand@2
        displayName: Push nuget
        inputs:
          command: 'push'
          packagesToPush: '$(System.ArtifactsDirectory)/**/*.nupkg'
          nuGetFeedType: 'external'
          publishFeedCredentials: 'Nuget.org'
